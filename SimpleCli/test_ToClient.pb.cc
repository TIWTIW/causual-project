// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_ToClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_ToClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {
class ToClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToClient> {
} _ToClient_default_instance_;

namespace protobuf_test_5fToClient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, datalength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, sen_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, tail_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(ToClient)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToClient_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test_ToClient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ToClient_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ToClient_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023test_ToClient.proto\022\004test\"\312\001\n\010ToClient"
      "\022\014\n\004head\030\001 \002(\r\022%\n\010DataType\030\002 \002(\0162\023.test."
      "ToClient.Type\022\022\n\nDataLength\030\003 \002(\r\022\020\n\010Sen"
      "_data\030\004 \002(\r\022\016\n\006pose_x\030\005 \002(\002\022\016\n\006pose_y\030\006 "
      "\002(\002\022\022\n\npose_theta\030\007 \002(\002\022\014\n\004tail\030\010 \002(\r\"!\n"
      "\004Type\022\013\n\007NoImage\020\000\022\014\n\010HasImage\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_ToClient.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_5fToClient_2eproto

const ::google::protobuf::EnumDescriptor* ToClient_Type_descriptor() {
  protobuf_test_5fToClient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fToClient_2eproto::file_level_enum_descriptors[0];
}
bool ToClient_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ToClient_Type ToClient::NoImage;
const ToClient_Type ToClient::HasImage;
const ToClient_Type ToClient::Type_MIN;
const ToClient_Type ToClient::Type_MAX;
const int ToClient::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToClient::kHeadFieldNumber;
const int ToClient::kDataTypeFieldNumber;
const int ToClient::kDataLengthFieldNumber;
const int ToClient::kSenDataFieldNumber;
const int ToClient::kPoseXFieldNumber;
const int ToClient::kPoseYFieldNumber;
const int ToClient::kPoseThetaFieldNumber;
const int ToClient::kTailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToClient::ToClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fToClient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.ToClient)
}
ToClient::ToClient(const ToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&head_, &from.head_,
    static_cast<size_t>(reinterpret_cast<char*>(&tail_) -
    reinterpret_cast<char*>(&head_)) + sizeof(tail_));
  // @@protoc_insertion_point(copy_constructor:test.ToClient)
}

void ToClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tail_) -
      reinterpret_cast<char*>(&head_)) + sizeof(tail_));
}

ToClient::~ToClient() {
  // @@protoc_insertion_point(destructor:test.ToClient)
  SharedDtor();
}

void ToClient::SharedDtor() {
}

void ToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClient::descriptor() {
  protobuf_test_5fToClient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fToClient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToClient& ToClient::default_instance() {
  protobuf_test_5fToClient_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToClient* ToClient::New(::google::protobuf::Arena* arena) const {
  ToClient* n = new ToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ToClient)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&head_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tail_) -
        reinterpret_cast<char*>(&head_)) + sizeof(tail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.ToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_head();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .test.ToClient.Type DataType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::ToClient_Type_IsValid(value)) {
            set_datatype(static_cast< ::test::ToClient_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataLength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_datalength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Sen_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sen_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sen_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pose_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_pose_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pose_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_pose_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pose_theta = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_pose_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 tail = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.ToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.ToClient)
  return false;
#undef DO_
}

void ToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.ToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 head = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->head(), output);
  }

  // required .test.ToClient.Type DataType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->datatype(), output);
  }

  // required uint32 DataLength = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datalength(), output);
  }

  // required uint32 Sen_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sen_data(), output);
  }

  // required float pose_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pose_x(), output);
  }

  // required float pose_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pose_y(), output);
  }

  // required float pose_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pose_theta(), output);
  }

  // required uint32 tail = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.ToClient)
}

::google::protobuf::uint8* ToClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.ToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 head = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->head(), target);
  }

  // required .test.ToClient.Type DataType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->datatype(), target);
  }

  // required uint32 DataLength = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datalength(), target);
  }

  // required uint32 Sen_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sen_data(), target);
  }

  // required float pose_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pose_x(), target);
  }

  // required float pose_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pose_y(), target);
  }

  // required float pose_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pose_theta(), target);
  }

  // required uint32 tail = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tail(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ToClient)
  return target;
}

size_t ToClient::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:test.ToClient)
  size_t total_size = 0;

  if (has_head()) {
    // required uint32 head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head());
  }

  if (has_datatype()) {
    // required .test.ToClient.Type DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  if (has_datalength()) {
    // required uint32 DataLength = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalength());
  }

  if (has_sen_data()) {
    // required uint32 Sen_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sen_data());
  }

  if (has_pose_x()) {
    // required float pose_x = 5;
    total_size += 1 + 4;
  }

  if (has_pose_y()) {
    // required float pose_y = 6;
    total_size += 1 + 4;
  }

  if (has_pose_theta()) {
    // required float pose_theta = 7;
    total_size += 1 + 4;
  }

  if (has_tail()) {
    // required uint32 tail = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tail());
  }

  return total_size;
}
size_t ToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.ToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head());

    // required .test.ToClient.Type DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());

    // required uint32 DataLength = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalength());

    // required uint32 Sen_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sen_data());

    // required float pose_x = 5;
    total_size += 1 + 4;

    // required float pose_y = 6;
    total_size += 1 + 4;

    // required float pose_theta = 7;
    total_size += 1 + 4;

    // required uint32 tail = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tail());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ToClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ToClient)
    MergeFrom(*source);
  }
}

void ToClient::MergeFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      head_ = from.head_;
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      datalength_ = from.datalength_;
    }
    if (cached_has_bits & 0x00000008u) {
      sen_data_ = from.sen_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      pose_x_ = from.pose_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      pose_y_ = from.pose_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      pose_theta_ = from.pose_theta_;
    }
    if (cached_has_bits & 0x00000080u) {
      tail_ = from.tail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClient::CopyFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ToClient::Swap(ToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToClient::InternalSwap(ToClient* other) {
  std::swap(head_, other->head_);
  std::swap(datatype_, other->datatype_);
  std::swap(datalength_, other->datalength_);
  std::swap(sen_data_, other->sen_data_);
  std::swap(pose_x_, other->pose_x_);
  std::swap(pose_y_, other->pose_y_);
  std::swap(pose_theta_, other->pose_theta_);
  std::swap(tail_, other->tail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToClient::GetMetadata() const {
  protobuf_test_5fToClient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fToClient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToClient

// required uint32 head = 1;
bool ToClient::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToClient::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ToClient::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToClient::clear_head() {
  head_ = 0u;
  clear_has_head();
}
::google::protobuf::uint32 ToClient::head() const {
  // @@protoc_insertion_point(field_get:test.ToClient.head)
  return head_;
}
void ToClient::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.head)
}

// required .test.ToClient.Type DataType = 2;
bool ToClient::has_datatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToClient::set_has_datatype() {
  _has_bits_[0] |= 0x00000002u;
}
void ToClient::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToClient::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::test::ToClient_Type ToClient::datatype() const {
  // @@protoc_insertion_point(field_get:test.ToClient.DataType)
  return static_cast< ::test::ToClient_Type >(datatype_);
}
void ToClient::set_datatype(::test::ToClient_Type value) {
  assert(::test::ToClient_Type_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.DataType)
}

// required uint32 DataLength = 3;
bool ToClient::has_datalength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToClient::set_has_datalength() {
  _has_bits_[0] |= 0x00000004u;
}
void ToClient::clear_has_datalength() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToClient::clear_datalength() {
  datalength_ = 0u;
  clear_has_datalength();
}
::google::protobuf::uint32 ToClient::datalength() const {
  // @@protoc_insertion_point(field_get:test.ToClient.DataLength)
  return datalength_;
}
void ToClient::set_datalength(::google::protobuf::uint32 value) {
  set_has_datalength();
  datalength_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.DataLength)
}

// required uint32 Sen_data = 4;
bool ToClient::has_sen_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToClient::set_has_sen_data() {
  _has_bits_[0] |= 0x00000008u;
}
void ToClient::clear_has_sen_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToClient::clear_sen_data() {
  sen_data_ = 0u;
  clear_has_sen_data();
}
::google::protobuf::uint32 ToClient::sen_data() const {
  // @@protoc_insertion_point(field_get:test.ToClient.Sen_data)
  return sen_data_;
}
void ToClient::set_sen_data(::google::protobuf::uint32 value) {
  set_has_sen_data();
  sen_data_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.Sen_data)
}

// required float pose_x = 5;
bool ToClient::has_pose_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ToClient::set_has_pose_x() {
  _has_bits_[0] |= 0x00000010u;
}
void ToClient::clear_has_pose_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void ToClient::clear_pose_x() {
  pose_x_ = 0;
  clear_has_pose_x();
}
float ToClient::pose_x() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_x)
  return pose_x_;
}
void ToClient::set_pose_x(float value) {
  set_has_pose_x();
  pose_x_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_x)
}

// required float pose_y = 6;
bool ToClient::has_pose_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ToClient::set_has_pose_y() {
  _has_bits_[0] |= 0x00000020u;
}
void ToClient::clear_has_pose_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void ToClient::clear_pose_y() {
  pose_y_ = 0;
  clear_has_pose_y();
}
float ToClient::pose_y() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_y)
  return pose_y_;
}
void ToClient::set_pose_y(float value) {
  set_has_pose_y();
  pose_y_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_y)
}

// required float pose_theta = 7;
bool ToClient::has_pose_theta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ToClient::set_has_pose_theta() {
  _has_bits_[0] |= 0x00000040u;
}
void ToClient::clear_has_pose_theta() {
  _has_bits_[0] &= ~0x00000040u;
}
void ToClient::clear_pose_theta() {
  pose_theta_ = 0;
  clear_has_pose_theta();
}
float ToClient::pose_theta() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_theta)
  return pose_theta_;
}
void ToClient::set_pose_theta(float value) {
  set_has_pose_theta();
  pose_theta_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_theta)
}

// required uint32 tail = 8;
bool ToClient::has_tail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ToClient::set_has_tail() {
  _has_bits_[0] |= 0x00000080u;
}
void ToClient::clear_has_tail() {
  _has_bits_[0] &= ~0x00000080u;
}
void ToClient::clear_tail() {
  tail_ = 0u;
  clear_has_tail();
}
::google::protobuf::uint32 ToClient::tail() const {
  // @@protoc_insertion_point(field_get:test.ToClient.tail)
  return tail_;
}
void ToClient::set_tail(::google::protobuf::uint32 value) {
  set_has_tail();
  tail_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.tail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
