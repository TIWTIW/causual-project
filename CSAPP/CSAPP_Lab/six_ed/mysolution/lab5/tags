!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNMENT	config.h	56;"	d
ALIGNMENT	mm.c	96;"	d	file:
ALLOC	mdriver-realloc.c	/^	enum {ALLOC, FREE, REALLOC} type; \/* type of request *\/$/;"	e	enum:__anon1::__anon2	file:
ALLOC	mdriver.c	/^    enum {ALLOC, FREE} type; \/* type of request *\/$/;"	e	enum:__anon6::__anon7	file:
AVG_LIBC_THRUPUT	config.h	44;"	d
BlockInfo	mm.c	/^struct BlockInfo {$/;"	s	file:
BlockInfo	mm.c	/^typedef struct BlockInfo BlockInfo;$/;"	t	typeref:struct:BlockInfo	file:
CACHE_BLOCK	fcyc.c	24;"	d	file:
CACHE_BYTES	fcyc.c	23;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g$/;"	m
CLEAR_CACHE	fcyc.c	22;"	d	file:
COMPENSATE	fcyc.c	21;"	d	file:
DEFAULT_TRACEFILES	config.h	24;"	d
EPSILON	fcyc.c	20;"	d	file:
FILES	Makefile	/^FILES = mm.c$/;"	m
FREE	mdriver-realloc.c	/^	enum {ALLOC, FREE, REALLOC} type; \/* type of request *\/$/;"	e	enum:__anon1::__anon2	file:
FREE	mdriver.c	/^    enum {ALLOC, FREE} type; \/* type of request *\/$/;"	e	enum:__anon6::__anon7	file:
FREE_LIST_HEAD	mm.c	86;"	d	file:
HDRLINES	mdriver-realloc.c	30;"	d	file:
HDRLINES	mdriver.c	30;"	d	file:
IS_ALIGNED	mdriver-realloc.c	34;"	d	file:
IS_ALIGNED	mdriver.c	34;"	d	file:
K	fcyc.c	18;"	d	file:
KEEP_SAMPLES	fcyc.c	41;"	d	file:
KEEP_VALS	fcyc.c	40;"	d	file:
LINENUM	mdriver-realloc.c	31;"	d	file:
LINENUM	mdriver.c	31;"	d	file:
MAXLINE	mdriver-realloc.c	29;"	d	file:
MAXLINE	mdriver.c	29;"	d	file:
MAXSAMPLES	fcyc.c	19;"	d	file:
MAX_ETIME	ftimer.c	61;"	d	file:
MAX_HEAP	config.h	61;"	d
MIN_BLOCK_SIZE	mm.c	93;"	d	file:
Mhz	fsecs.c	/^static double Mhz;  \/* estimated CPU clock frequency *\/$/;"	v	file:
NEVENT	clock.c	208;"	d	file:
OBJS	Makefile	/^OBJS = mm.o memlib.o fsecs.o fcyc.o clock.o ftimer.o$/;"	m
REALLOC	mdriver-realloc.c	/^	enum {ALLOC, FREE, REALLOC} type; \/* type of request *\/$/;"	e	enum:__anon1::__anon2	file:
RECORDTHRESH	clock.c	210;"	d	file:
SIZE	mm.c	116;"	d	file:
SUBMITDIR	Makefile	/^SUBMITDIR = \/projects\/instr\/10sp\/cse351\/$(USER)\/lab7$/;"	m
TAG_PRECEDING_USED	mm.c	125;"	d	file:
TAG_USED	mm.c	119;"	d	file:
THRESHOLD	clock.c	209;"	d	file:
TRACEDIR	config.h	15;"	d
UNSCALED_POINTER_ADD	mm.c	32;"	d	file:
UNSCALED_POINTER_SUB	mm.c	33;"	d	file:
USE_FCYC	config.h	66;"	d
USE_GETTOD	config.h	68;"	d
USE_ITIMER	config.h	67;"	d
UTIL_WEIGHT	config.h	51;"	d
WORD_SIZE	mm.c	89;"	d	file:
__CONFIG_H_	config.h	2;"	d
access_counter	clock.c	/^void access_counter(unsigned *hi, unsigned *lo)$/;"	f
add_range	mdriver-realloc.c	/^static int add_range(range_t **ranges, char *lo, int size, $/;"	f	file:
add_range	mdriver.c	/^static int add_range(range_t **ranges, char *lo, int size, $/;"	f	file:
add_sample	fcyc.c	/^static void add_sample(double val)$/;"	f	file:
app_error	mdriver-realloc.c	/^void app_error(char *msg) $/;"	f
app_error	mdriver.c	/^void app_error(char *msg) $/;"	f
block_sizes	mdriver-realloc.c	/^	size_t *block_sizes; \/* ... and a corresponding array of payload sizes *\/$/;"	m	struct:__anon3	file:
block_sizes	mdriver.c	/^    size_t *block_sizes; \/* ... and a corresponding array of payload sizes *\/$/;"	m	struct:__anon8	file:
blocks	mdriver-realloc.c	/^	char **blocks;       \/* array of ptrs returned by malloc\/realloc... *\/$/;"	m	struct:__anon3	file:
blocks	mdriver.c	/^    char **blocks;       \/* array of ptrs returned by malloc... *\/$/;"	m	struct:__anon8	file:
cache_block	fcyc.c	/^static int cache_block = CACHE_BLOCK;$/;"	v	file:
cache_buf	fcyc.c	/^static int *cache_buf = NULL;$/;"	v	file:
cache_bytes	fcyc.c	/^static int cache_bytes = CACHE_BYTES;$/;"	v	file:
callibrate	clock.c	/^static void callibrate(int verbose)$/;"	f	file:
clear	fcyc.c	/^static void clear()$/;"	f	file:
clear_cache	fcyc.c	/^static int clear_cache = CLEAR_CACHE;$/;"	v	file:
clear_ranges	mdriver-realloc.c	/^static void clear_ranges(range_t **ranges)$/;"	f	file:
clear_ranges	mdriver.c	/^static void clear_ranges(range_t **ranges)$/;"	f	file:
coalesceFreeBlock	mm.c	/^static void coalesceFreeBlock(BlockInfo* oldBlock) {$/;"	f	file:
compensate	fcyc.c	/^static int compensate = COMPENSATE;$/;"	v	file:
counter	clock.c	/^static unsigned int (*counter)(void)= (void *)counterRoutine;$/;"	v	file:
counterRoutine	clock.c	/^static unsigned int counterRoutine[] =$/;"	v	file:
cyc_hi	clock.c	/^static unsigned cyc_hi = 0;$/;"	v	file:
cyc_lo	clock.c	/^static unsigned cyc_lo = 0;$/;"	v	file:
cyc_per_tick	clock.c	/^static double cyc_per_tick = 0.0;$/;"	v	file:
default_tracefiles	mdriver-realloc.c	/^static char *default_tracefiles[] = {  $/;"	v	file:
default_tracefiles	mdriver.c	/^static char *default_tracefiles[] = {  $/;"	v	file:
epsilon	fcyc.c	/^static double epsilon = EPSILON;$/;"	v	file:
errors	mdriver-realloc.c	/^static int errors = 0;  \/* number of errs found when running student malloc *\/$/;"	v	file:
errors	mdriver.c	/^static int errors = 0;  \/* number of errs found when running student malloc *\/$/;"	v	file:
eval_libc_speed	mdriver-realloc.c	/^static void eval_libc_speed(void *ptr)$/;"	f	file:
eval_libc_speed	mdriver.c	/^static void eval_libc_speed(void *ptr)$/;"	f	file:
eval_libc_valid	mdriver-realloc.c	/^static int eval_libc_valid(trace_t *trace, int tracenum)$/;"	f	file:
eval_libc_valid	mdriver.c	/^static int eval_libc_valid(trace_t *trace, int tracenum)$/;"	f	file:
eval_mm_speed	mdriver-realloc.c	/^static void eval_mm_speed(void *ptr)$/;"	f	file:
eval_mm_speed	mdriver.c	/^static void eval_mm_speed(void *ptr)$/;"	f	file:
eval_mm_util	mdriver-realloc.c	/^static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)$/;"	f	file:
eval_mm_util	mdriver.c	/^static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)$/;"	f	file:
eval_mm_valid	mdriver-realloc.c	/^static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) $/;"	f	file:
eval_mm_valid	mdriver.c	/^static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) $/;"	f	file:
fcyc	fcyc.c	/^double fcyc(test_funct f, void *argp)$/;"	f
first_p	ftimer.c	/^static struct itimerval first_p; \/* prof time*\/$/;"	v	typeref:struct:itimerval	file:
first_r	ftimer.c	/^static struct itimerval first_r; \/* real time *\/$/;"	v	typeref:struct:itimerval	file:
first_u	ftimer.c	/^static struct itimerval first_u; \/* user time *\/$/;"	v	typeref:struct:itimerval	file:
free_trace	mdriver-realloc.c	/^void free_trace(trace_t *trace)$/;"	f
free_trace	mdriver.c	/^void free_trace(trace_t *trace)$/;"	f
fsecs	fsecs.c	/^double fsecs(fsecs_test_funct f, void *argp) $/;"	f
fsecs_test_funct	fsecs.h	/^typedef void (*fsecs_test_funct)(void *);$/;"	t
ftimer_gettod	ftimer.c	/^double ftimer_gettod(ftimer_test_funct f, void *argp, int n)$/;"	f
ftimer_itimer	ftimer.c	/^double ftimer_itimer(ftimer_test_funct f, void *argp, int n)$/;"	f
ftimer_test_funct	ftimer.h	/^typedef void (*ftimer_test_funct)(void *); $/;"	t
get_comp_counter	clock.c	/^double get_comp_counter() $/;"	f
get_counter	clock.c	/^double get_counter() $/;"	f
get_counter	clock.c	/^double get_counter()$/;"	f
get_etime	ftimer.c	/^static double get_etime(void) {$/;"	f	file:
has_converged	fcyc.c	/^static int has_converged()$/;"	f	file:
hi	mdriver-realloc.c	/^	char *hi;              \/* high payload address *\/$/;"	m	struct:range_t	file:
hi	mdriver.c	/^    char *hi;              \/* high payload address *\/$/;"	m	struct:range_t	file:
index	mdriver-realloc.c	/^	int index;                        \/* index for free() to use later *\/$/;"	m	struct:__anon1	file:
index	mdriver.c	/^    int index;                        \/* index for free() to use later *\/$/;"	m	struct:__anon6	file:
init_etime	ftimer.c	/^static void init_etime(void)$/;"	f	file:
init_fsecs	fsecs.c	/^void init_fsecs(void)$/;"	f
init_sampler	fcyc.c	/^static void init_sampler()$/;"	f	file:
insertFreeBlock	mm.c	/^static void insertFreeBlock(BlockInfo* freeBlock) {$/;"	f	file:
kbest	fcyc.c	/^static int kbest = K;$/;"	v	file:
lo	mdriver-realloc.c	/^	char *lo;              \/* low payload address *\/$/;"	m	struct:range_t	file:
lo	mdriver.c	/^    char *lo;              \/* low payload address *\/$/;"	m	struct:range_t	file:
main	mdriver-realloc.c	/^int main(int argc, char **argv)$/;"	f
main	mdriver.c	/^int main(int argc, char **argv)$/;"	f
malloc_error	mdriver-realloc.c	/^void malloc_error(int tracenum, int opnum, char *msg)$/;"	f
malloc_error	mdriver.c	/^void malloc_error(int tracenum, int opnum, char *msg)$/;"	f
maxsamples	fcyc.c	/^static int maxsamples = MAXSAMPLES;$/;"	v	file:
mem_brk	memlib.c	/^static char *mem_brk;        \/* points to last byte of heap *\/$/;"	v	file:
mem_deinit	memlib.c	/^void mem_deinit(void)$/;"	f
mem_heap_hi	memlib.c	/^void *mem_heap_hi()$/;"	f
mem_heap_lo	memlib.c	/^void *mem_heap_lo()$/;"	f
mem_heapsize	memlib.c	/^size_t mem_heapsize() $/;"	f
mem_init	memlib.c	/^void mem_init(void)$/;"	f
mem_max_addr	memlib.c	/^static char *mem_max_addr;   \/* largest legal heap address *\/ $/;"	v	file:
mem_pagesize	memlib.c	/^size_t mem_pagesize()$/;"	f
mem_reset_brk	memlib.c	/^void mem_reset_brk()$/;"	f
mem_sbrk	memlib.c	/^void *mem_sbrk(size_t incr) $/;"	f
mem_start_brk	memlib.c	/^static char *mem_start_brk;  \/* points to first byte of heap *\/$/;"	v	file:
mhz	clock.c	/^double mhz(int verbose)$/;"	f
mhz_full	clock.c	/^double mhz_full(int verbose, int sleeptime)$/;"	f
mm_check	mm.c	/^int mm_check() {$/;"	f
mm_free	mm.c	/^void mm_free (void *ptr) {$/;"	f
mm_init	mm.c	/^int mm_init () {$/;"	f
mm_malloc	mm.c	/^void* mm_malloc (size_t size) {$/;"	f
mm_realloc	mm.c	/^void* mm_realloc(void* ptr, size_t size) {$/;"	f
msg	mdriver-realloc.c	/^char msg[MAXLINE];      \/* for whenever we need to compose an error message *\/$/;"	v
msg	mdriver.c	/^char msg[MAXLINE];      \/* for whenever we need to compose an error message *\/$/;"	v
next	mdriver-realloc.c	/^	struct range_t *next;  \/* next list element *\/$/;"	m	struct:range_t	typeref:struct:range_t::range_t	file:
next	mdriver.c	/^    struct range_t *next;  \/* next list element *\/$/;"	m	struct:range_t	typeref:struct:range_t::range_t	file:
next	mm.c	/^  struct BlockInfo* next;$/;"	m	struct:BlockInfo	typeref:struct:BlockInfo::BlockInfo	file:
num_ids	mdriver-realloc.c	/^	int num_ids;         \/* number of alloc\/realloc ids *\/$/;"	m	struct:__anon3	file:
num_ids	mdriver.c	/^    int num_ids;         \/* number of alloc ids *\/$/;"	m	struct:__anon8	file:
num_ops	mdriver-realloc.c	/^	int num_ops;         \/* number of distinct requests *\/$/;"	m	struct:__anon3	file:
num_ops	mdriver.c	/^    int num_ops;         \/* number of distinct requests *\/$/;"	m	struct:__anon8	file:
ops	mdriver-realloc.c	/^	double ops;      \/* number of ops (malloc\/free\/realloc) in the trace *\/$/;"	m	struct:__anon5	file:
ops	mdriver-realloc.c	/^	traceop_t *ops;      \/* array of requests *\/$/;"	m	struct:__anon3	file:
ops	mdriver.c	/^    double ops;      \/* number of ops (malloc\/free) in the trace *\/$/;"	m	struct:__anon10	file:
ops	mdriver.c	/^    traceop_t *ops;      \/* array of requests *\/$/;"	m	struct:__anon8	file:
ovhd	clock.c	/^double ovhd()$/;"	f
prev	mm.c	/^  struct BlockInfo* prev;$/;"	m	struct:BlockInfo	typeref:struct:BlockInfo::BlockInfo	file:
printresults	mdriver-realloc.c	/^static void printresults(int n, stats_t *stats) $/;"	f	file:
printresults	mdriver.c	/^static void printresults(int n, stats_t *stats) $/;"	f	file:
range_t	mdriver-realloc.c	/^typedef struct range_t {$/;"	s	file:
range_t	mdriver-realloc.c	/^} range_t;$/;"	t	typeref:struct:range_t	file:
range_t	mdriver.c	/^typedef struct range_t {$/;"	s	file:
range_t	mdriver.c	/^} range_t;$/;"	t	typeref:struct:range_t	file:
ranges	mdriver-realloc.c	/^	range_t *ranges;$/;"	m	struct:__anon4	file:
ranges	mdriver.c	/^    range_t *ranges;$/;"	m	struct:__anon9	file:
read_trace	mdriver-realloc.c	/^static trace_t *read_trace(char *tracedir, char *filename)$/;"	f	file:
read_trace	mdriver.c	/^static trace_t *read_trace(char *tracedir, char *filename)$/;"	f	file:
removeFreeBlock	mm.c	/^static void removeFreeBlock(BlockInfo* freeBlock) {$/;"	f	file:
remove_range	mdriver-realloc.c	/^static void remove_range(range_t **ranges, char *lo)$/;"	f	file:
remove_range	mdriver.c	/^static void remove_range(range_t **ranges, char *lo)$/;"	f	file:
requestMoreSpace	mm.c	/^static void requestMoreSpace(size_t reqSize) {$/;"	f	file:
samplecount	fcyc.c	/^static int samplecount = 0;$/;"	v	file:
samples	fcyc.c	/^static double *samples = NULL;$/;"	v	file:
searchFreeList	mm.c	/^static void * searchFreeList(size_t reqSize) {   $/;"	f	file:
secs	mdriver-realloc.c	/^	double secs;     \/* number of secs needed to run the trace *\/$/;"	m	struct:__anon5	file:
secs	mdriver.c	/^    double secs;     \/* number of secs needed to run the trace *\/$/;"	m	struct:__anon10	file:
set_fcyc_cache_block	fcyc.c	/^void set_fcyc_cache_block(int bytes) {$/;"	f
set_fcyc_cache_size	fcyc.c	/^void set_fcyc_cache_size(int bytes)$/;"	f
set_fcyc_clear_cache	fcyc.c	/^void set_fcyc_clear_cache(int clear)$/;"	f
set_fcyc_compensate	fcyc.c	/^void set_fcyc_compensate(int compensate_arg)$/;"	f
set_fcyc_epsilon	fcyc.c	/^void set_fcyc_epsilon(double epsilon_arg)$/;"	f
set_fcyc_k	fcyc.c	/^void set_fcyc_k(int k)$/;"	f
set_fcyc_maxsamples	fcyc.c	/^void set_fcyc_maxsamples(int maxsamples_arg)$/;"	f
sink	fcyc.c	/^static volatile int sink = 0;$/;"	v	file:
size	mdriver-realloc.c	/^	int size;                         \/* byte size of alloc\/realloc request *\/$/;"	m	struct:__anon1	file:
size	mdriver.c	/^    int size;                         \/* byte size of alloc request *\/$/;"	m	struct:__anon6	file:
sizeAndTags	mm.c	/^  size_t sizeAndTags;$/;"	m	struct:BlockInfo	file:
speed_t	mdriver-realloc.c	/^} speed_t;$/;"	t	typeref:struct:__anon4	file:
speed_t	mdriver.c	/^} speed_t;$/;"	t	typeref:struct:__anon9	file:
start_comp_counter	clock.c	/^void start_comp_counter() $/;"	f
start_counter	clock.c	/^void start_counter()$/;"	f
start_tick	clock.c	/^static clock_t start_tick = 0;$/;"	v	file:
stats_t	mdriver-realloc.c	/^} stats_t; $/;"	t	typeref:struct:__anon5	file:
stats_t	mdriver.c	/^} stats_t; $/;"	t	typeref:struct:__anon10	file:
sugg_heapsize	mdriver-realloc.c	/^	int sugg_heapsize;   \/* suggested heap size (unused) *\/$/;"	m	struct:__anon3	file:
sugg_heapsize	mdriver.c	/^    int sugg_heapsize;   \/* suggested heap size (unused) *\/$/;"	m	struct:__anon8	file:
sumresults	mdriver-realloc.c	/^sumresults(const stats_t *stats, const int n_stats, $/;"	f
test_funct	fcyc.h	/^typedef void (*test_funct)(void *);$/;"	t
trace	mdriver-realloc.c	/^	trace_t *trace;  $/;"	m	struct:__anon4	file:
trace	mdriver.c	/^    trace_t *trace;  $/;"	m	struct:__anon9	file:
trace_t	mdriver-realloc.c	/^} trace_t;$/;"	t	typeref:struct:__anon3	file:
trace_t	mdriver.c	/^} trace_t;$/;"	t	typeref:struct:__anon8	file:
tracedir	mdriver-realloc.c	/^static char tracedir[MAXLINE] = TRACEDIR;$/;"	v	file:
tracedir	mdriver.c	/^static char tracedir[MAXLINE] = TRACEDIR;$/;"	v	file:
traceop_t	mdriver-realloc.c	/^} traceop_t;$/;"	t	typeref:struct:__anon1	file:
traceop_t	mdriver.c	/^} traceop_t;$/;"	t	typeref:struct:__anon6	file:
type	mdriver-realloc.c	/^	enum {ALLOC, FREE, REALLOC} type; \/* type of request *\/$/;"	m	struct:__anon1	typeref:enum:__anon1::__anon2	file:
type	mdriver.c	/^    enum {ALLOC, FREE} type; \/* type of request *\/$/;"	m	struct:__anon6	typeref:enum:__anon6::__anon7	file:
unix_error	mdriver-realloc.c	/^void unix_error(char *msg) $/;"	f
unix_error	mdriver.c	/^void unix_error(char *msg) $/;"	f
usage	mdriver-realloc.c	/^static void usage(void) $/;"	f	file:
usage	mdriver.c	/^static void usage(void) $/;"	f	file:
util	mdriver-realloc.c	/^	double util;     \/* space utilization for this trace (always 0 for libc) *\/$/;"	m	struct:__anon5	file:
util	mdriver.c	/^    double util;     \/* space utilization for this trace (always 0 for libc) *\/$/;"	m	struct:__anon10	file:
valid	mdriver-realloc.c	/^	int valid;       \/* was the trace processed correctly by the allocator? *\/$/;"	m	struct:__anon5	file:
valid	mdriver.c	/^    int valid;       \/* was the trace processed correctly by the allocator? *\/$/;"	m	struct:__anon10	file:
values	fcyc.c	/^static double *values = NULL;$/;"	v	file:
verbose	mdriver-realloc.c	/^int verbose = 0;        \/* global flag for verbose output *\/$/;"	v
verbose	mdriver.c	/^int verbose = 0;        \/* global flag for verbose output *\/$/;"	v
weight	mdriver-realloc.c	/^	int weight;          \/* weight for this trace (unused) *\/$/;"	m	struct:__anon3	file:
weight	mdriver.c	/^    int weight;          \/* weight for this trace (unused) *\/$/;"	m	struct:__anon8	file:
