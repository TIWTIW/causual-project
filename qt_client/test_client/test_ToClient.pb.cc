// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_ToClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_ToClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {

namespace {

const ::google::protobuf::Descriptor* ToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClient_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ToClient_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5fToClient_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_5fToClient_2eproto() {
  protobuf_AddDesc_test_5fToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test_ToClient.proto");
  GOOGLE_CHECK(file != NULL);
  ToClient_descriptor_ = file->message_type(0);
  static const int ToClient_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, sen_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, pose_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, image_length_),
  };
  ToClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ToClient_descriptor_,
      ToClient::default_instance_,
      ToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, _has_bits_[0]),
      -1,
      -1,
      sizeof(ToClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClient, _internal_metadata_),
      -1);
  ToClient_Type_descriptor_ = ToClient_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_5fToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ToClient_descriptor_, &ToClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5fToClient_2eproto() {
  delete ToClient::default_instance_;
  delete ToClient_reflection_;
}

void protobuf_AddDesc_test_5fToClient_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_5fToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023test_ToClient.proto\022\004test\"\260\001\n\010ToClient"
    "\022%\n\010DataType\030\001 \002(\0162\023.test.ToClient.Type\022"
    "\020\n\010Sen_data\030\003 \002(\r\022\016\n\006pose_x\030\004 \002(\002\022\016\n\006pos"
    "e_y\030\005 \002(\002\022\022\n\npose_theta\030\006 \002(\002\022\024\n\014Image_L"
    "ength\030\007 \001(\r\"!\n\004Type\022\013\n\007NoImage\020\000\022\014\n\010HasI"
    "mage\020\001", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_ToClient.proto", &protobuf_RegisterTypes);
  ToClient::default_instance_ = new ToClient();
  ToClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5fToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5fToClient_2eproto {
  StaticDescriptorInitializer_test_5fToClient_2eproto() {
    protobuf_AddDesc_test_5fToClient_2eproto();
  }
} static_descriptor_initializer_test_5fToClient_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ToClient_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClient_Type_descriptor_;
}
bool ToClient_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ToClient_Type ToClient::NoImage;
const ToClient_Type ToClient::HasImage;
const ToClient_Type ToClient::Type_MIN;
const ToClient_Type ToClient::Type_MAX;
const int ToClient::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToClient::kDataTypeFieldNumber;
const int ToClient::kSenDataFieldNumber;
const int ToClient::kPoseXFieldNumber;
const int ToClient::kPoseYFieldNumber;
const int ToClient::kPoseThetaFieldNumber;
const int ToClient::kImageLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToClient::ToClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.ToClient)
}

void ToClient::InitAsDefaultInstance() {
}

ToClient::ToClient(const ToClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.ToClient)
}

void ToClient::SharedCtor() {
  _cached_size_ = 0;
  datatype_ = 0;
  sen_data_ = 0u;
  pose_x_ = 0;
  pose_y_ = 0;
  pose_theta_ = 0;
  image_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClient::~ToClient() {
  // @@protoc_insertion_point(destructor:test.ToClient)
  SharedDtor();
}

void ToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClient_descriptor_;
}

const ToClient& ToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5fToClient_2eproto();
  return *default_instance_;
}

ToClient* ToClient::default_instance_ = NULL;

ToClient* ToClient::New(::google::protobuf::Arena* arena) const {
  ToClient* n = new ToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ToClient)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ToClient, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ToClient*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(datatype_, image_length_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.ToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .test.ToClient.Type DataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::ToClient_Type_IsValid(value)) {
            set_datatype(static_cast< ::test::ToClient_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Sen_data;
        break;
      }

      // required uint32 Sen_data = 3;
      case 3: {
        if (tag == 24) {
         parse_Sen_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sen_data_)));
          set_has_sen_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pose_x;
        break;
      }

      // required float pose_x = 4;
      case 4: {
        if (tag == 37) {
         parse_pose_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_x_)));
          set_has_pose_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pose_y;
        break;
      }

      // required float pose_y = 5;
      case 5: {
        if (tag == 45) {
         parse_pose_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_y_)));
          set_has_pose_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pose_theta;
        break;
      }

      // required float pose_theta = 6;
      case 6: {
        if (tag == 53) {
         parse_pose_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_theta_)));
          set_has_pose_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Image_Length;
        break;
      }

      // optional uint32 Image_Length = 7;
      case 7: {
        if (tag == 56) {
         parse_Image_Length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_length_)));
          set_has_image_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.ToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.ToClient)
  return false;
#undef DO_
}

void ToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.ToClient)
  // required .test.ToClient.Type DataType = 1;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // required uint32 Sen_data = 3;
  if (has_sen_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sen_data(), output);
  }

  // required float pose_x = 4;
  if (has_pose_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pose_x(), output);
  }

  // required float pose_y = 5;
  if (has_pose_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pose_y(), output);
  }

  // required float pose_theta = 6;
  if (has_pose_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pose_theta(), output);
  }

  // optional uint32 Image_Length = 7;
  if (has_image_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->image_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.ToClient)
}

::google::protobuf::uint8* ToClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.ToClient)
  // required .test.ToClient.Type DataType = 1;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // required uint32 Sen_data = 3;
  if (has_sen_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sen_data(), target);
  }

  // required float pose_x = 4;
  if (has_pose_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pose_x(), target);
  }

  // required float pose_y = 5;
  if (has_pose_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pose_y(), target);
  }

  // required float pose_theta = 6;
  if (has_pose_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pose_theta(), target);
  }

  // optional uint32 Image_Length = 7;
  if (has_image_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->image_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ToClient)
  return target;
}

int ToClient::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:test.ToClient)
  int total_size = 0;

  if (has_datatype()) {
    // required .test.ToClient.Type DataType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  if (has_sen_data()) {
    // required uint32 Sen_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sen_data());
  }

  if (has_pose_x()) {
    // required float pose_x = 4;
    total_size += 1 + 4;
  }

  if (has_pose_y()) {
    // required float pose_y = 5;
    total_size += 1 + 4;
  }

  if (has_pose_theta()) {
    // required float pose_theta = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int ToClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:test.ToClient)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .test.ToClient.Type DataType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());

    // required uint32 Sen_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sen_data());

    // required float pose_x = 4;
    total_size += 1 + 4;

    // required float pose_y = 5;
    total_size += 1 + 4;

    // required float pose_theta = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Image_Length = 7;
  if (has_image_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_length());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ToClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ToClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ToClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ToClient)
    MergeFrom(*source);
  }
}

void ToClient::MergeFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ToClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_sen_data()) {
      set_sen_data(from.sen_data());
    }
    if (from.has_pose_x()) {
      set_pose_x(from.pose_x());
    }
    if (from.has_pose_y()) {
      set_pose_y(from.pose_y());
    }
    if (from.has_pose_theta()) {
      set_pose_theta(from.pose_theta());
    }
    if (from.has_image_length()) {
      set_image_length(from.image_length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClient::CopyFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ToClient::Swap(ToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToClient::InternalSwap(ToClient* other) {
  std::swap(datatype_, other->datatype_);
  std::swap(sen_data_, other->sen_data_);
  std::swap(pose_x_, other->pose_x_);
  std::swap(pose_y_, other->pose_y_);
  std::swap(pose_theta_, other->pose_theta_);
  std::swap(image_length_, other->image_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClient_descriptor_;
  metadata.reflection = ToClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToClient

// required .test.ToClient.Type DataType = 1;
bool ToClient::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToClient::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
void ToClient::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToClient::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
 ::test::ToClient_Type ToClient::datatype() const {
  // @@protoc_insertion_point(field_get:test.ToClient.DataType)
  return static_cast< ::test::ToClient_Type >(datatype_);
}
 void ToClient::set_datatype(::test::ToClient_Type value) {
  assert(::test::ToClient_Type_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.DataType)
}

// required uint32 Sen_data = 3;
bool ToClient::has_sen_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToClient::set_has_sen_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ToClient::clear_has_sen_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToClient::clear_sen_data() {
  sen_data_ = 0u;
  clear_has_sen_data();
}
 ::google::protobuf::uint32 ToClient::sen_data() const {
  // @@protoc_insertion_point(field_get:test.ToClient.Sen_data)
  return sen_data_;
}
 void ToClient::set_sen_data(::google::protobuf::uint32 value) {
  set_has_sen_data();
  sen_data_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.Sen_data)
}

// required float pose_x = 4;
bool ToClient::has_pose_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToClient::set_has_pose_x() {
  _has_bits_[0] |= 0x00000004u;
}
void ToClient::clear_has_pose_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToClient::clear_pose_x() {
  pose_x_ = 0;
  clear_has_pose_x();
}
 float ToClient::pose_x() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_x)
  return pose_x_;
}
 void ToClient::set_pose_x(float value) {
  set_has_pose_x();
  pose_x_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_x)
}

// required float pose_y = 5;
bool ToClient::has_pose_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToClient::set_has_pose_y() {
  _has_bits_[0] |= 0x00000008u;
}
void ToClient::clear_has_pose_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToClient::clear_pose_y() {
  pose_y_ = 0;
  clear_has_pose_y();
}
 float ToClient::pose_y() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_y)
  return pose_y_;
}
 void ToClient::set_pose_y(float value) {
  set_has_pose_y();
  pose_y_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_y)
}

// required float pose_theta = 6;
bool ToClient::has_pose_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ToClient::set_has_pose_theta() {
  _has_bits_[0] |= 0x00000010u;
}
void ToClient::clear_has_pose_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
void ToClient::clear_pose_theta() {
  pose_theta_ = 0;
  clear_has_pose_theta();
}
 float ToClient::pose_theta() const {
  // @@protoc_insertion_point(field_get:test.ToClient.pose_theta)
  return pose_theta_;
}
 void ToClient::set_pose_theta(float value) {
  set_has_pose_theta();
  pose_theta_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.pose_theta)
}

// optional uint32 Image_Length = 7;
bool ToClient::has_image_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ToClient::set_has_image_length() {
  _has_bits_[0] |= 0x00000020u;
}
void ToClient::clear_has_image_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void ToClient::clear_image_length() {
  image_length_ = 0u;
  clear_has_image_length();
}
 ::google::protobuf::uint32 ToClient::image_length() const {
  // @@protoc_insertion_point(field_get:test.ToClient.Image_Length)
  return image_length_;
}
 void ToClient::set_image_length(::google::protobuf::uint32 value) {
  set_has_image_length();
  image_length_ = value;
  // @@protoc_insertion_point(field_set:test.ToClient.Image_Length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
