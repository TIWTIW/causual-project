// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_ToServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_ToServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {

namespace {

const ::google::protobuf::Descriptor* ToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ToServer_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ToServer_Mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5fToServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_5fToServer_2eproto() {
  protobuf_AddDesc_test_5fToServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test_ToServer.proto");
  GOOGLE_CHECK(file != NULL);
  ToServer_descriptor_ = file->message_type(0);
  static const int ToServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, modeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, backward_),
  };
  ToServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ToServer_descriptor_,
      ToServer::default_instance_,
      ToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ToServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToServer, _internal_metadata_),
      -1);
  ToServer_Type_descriptor_ = ToServer_descriptor_->enum_type(0);
  ToServer_Mode_descriptor_ = ToServer_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_5fToServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ToServer_descriptor_, &ToServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5fToServer_2eproto() {
  delete ToServer::default_instance_;
  delete ToServer_reflection_;
}

void protobuf_AddDesc_test_5fToServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_5fToServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023test_ToServer.proto\022\004test\"\211\002\n\010ToServer"
    "\022%\n\010DataType\030\001 \001(\0162\023.test.ToServer.Type\022"
    "%\n\010ModeInfo\030\002 \001(\0162\023.test.ToServer.Mode\022\014"
    "\n\004left\030\003 \001(\010\022\r\n\005right\030\004 \001(\010\022\017\n\007forward\030\005"
    " \001(\010\022\020\n\010backward\030\006 \001(\010\"7\n\004Type\022\017\n\013Defaul"
    "tType\020\000\022\r\n\tNeedImage\020\001\022\017\n\013NoNeedImage\020\002\""
    "6\n\004Mode\022\017\n\013DefaultMode\020\000\022\017\n\013ControlMode\020"
    "\001\022\014\n\010SelfMode\020\002", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_ToServer.proto", &protobuf_RegisterTypes);
  ToServer::default_instance_ = new ToServer();
  ToServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5fToServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5fToServer_2eproto {
  StaticDescriptorInitializer_test_5fToServer_2eproto() {
    protobuf_AddDesc_test_5fToServer_2eproto();
  }
} static_descriptor_initializer_test_5fToServer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ToServer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToServer_Type_descriptor_;
}
bool ToServer_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ToServer_Type ToServer::DefaultType;
const ToServer_Type ToServer::NeedImage;
const ToServer_Type ToServer::NoNeedImage;
const ToServer_Type ToServer::Type_MIN;
const ToServer_Type ToServer::Type_MAX;
const int ToServer::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ToServer_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToServer_Mode_descriptor_;
}
bool ToServer_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ToServer_Mode ToServer::DefaultMode;
const ToServer_Mode ToServer::ControlMode;
const ToServer_Mode ToServer::SelfMode;
const ToServer_Mode ToServer::Mode_MIN;
const ToServer_Mode ToServer::Mode_MAX;
const int ToServer::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToServer::kDataTypeFieldNumber;
const int ToServer::kModeInfoFieldNumber;
const int ToServer::kLeftFieldNumber;
const int ToServer::kRightFieldNumber;
const int ToServer::kForwardFieldNumber;
const int ToServer::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToServer::ToServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.ToServer)
}

void ToServer::InitAsDefaultInstance() {
}

ToServer::ToServer(const ToServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.ToServer)
}

void ToServer::SharedCtor() {
  _cached_size_ = 0;
  datatype_ = 0;
  modeinfo_ = 0;
  left_ = false;
  right_ = false;
  forward_ = false;
  backward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToServer::~ToServer() {
  // @@protoc_insertion_point(destructor:test.ToServer)
  SharedDtor();
}

void ToServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToServer_descriptor_;
}

const ToServer& ToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5fToServer_2eproto();
  return *default_instance_;
}

ToServer* ToServer::default_instance_ = NULL;

ToServer* ToServer::New(::google::protobuf::Arena* arena) const {
  ToServer* n = new ToServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ToServer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ToServer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ToServer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(datatype_, backward_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.ToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .test.ToServer.Type DataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::ToServer_Type_IsValid(value)) {
            set_datatype(static_cast< ::test::ToServer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ModeInfo;
        break;
      }

      // optional .test.ToServer.Mode ModeInfo = 2;
      case 2: {
        if (tag == 16) {
         parse_ModeInfo:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::ToServer_Mode_IsValid(value)) {
            set_modeinfo(static_cast< ::test::ToServer_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }

      // optional bool left = 3;
      case 3: {
        if (tag == 24) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }

      // optional bool right = 4;
      case 4: {
        if (tag == 32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forward;
        break;
      }

      // optional bool forward = 5;
      case 5: {
        if (tag == 40) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
          set_has_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_backward;
        break;
      }

      // optional bool backward = 6;
      case 6: {
        if (tag == 48) {
         parse_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
          set_has_backward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.ToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.ToServer)
  return false;
#undef DO_
}

void ToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.ToServer)
  // optional .test.ToServer.Type DataType = 1;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // optional .test.ToServer.Mode ModeInfo = 2;
  if (has_modeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->modeinfo(), output);
  }

  // optional bool left = 3;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->left(), output);
  }

  // optional bool right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right(), output);
  }

  // optional bool forward = 5;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // optional bool backward = 6;
  if (has_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->backward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.ToServer)
}

::google::protobuf::uint8* ToServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.ToServer)
  // optional .test.ToServer.Type DataType = 1;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // optional .test.ToServer.Mode ModeInfo = 2;
  if (has_modeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->modeinfo(), target);
  }

  // optional bool left = 3;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->left(), target);
  }

  // optional bool right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right(), target);
  }

  // optional bool forward = 5;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // optional bool backward = 6;
  if (has_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->backward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ToServer)
  return target;
}

int ToServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:test.ToServer)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .test.ToServer.Type DataType = 1;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

    // optional .test.ToServer.Mode ModeInfo = 2;
    if (has_modeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modeinfo());
    }

    // optional bool left = 3;
    if (has_left()) {
      total_size += 1 + 1;
    }

    // optional bool right = 4;
    if (has_right()) {
      total_size += 1 + 1;
    }

    // optional bool forward = 5;
    if (has_forward()) {
      total_size += 1 + 1;
    }

    // optional bool backward = 6;
    if (has_backward()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ToServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ToServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ToServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ToServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ToServer)
    MergeFrom(*source);
  }
}

void ToServer::MergeFrom(const ToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ToServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_modeinfo()) {
      set_modeinfo(from.modeinfo());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_forward()) {
      set_forward(from.forward());
    }
    if (from.has_backward()) {
      set_backward(from.backward());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ToServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToServer::CopyFrom(const ToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToServer::IsInitialized() const {

  return true;
}

void ToServer::Swap(ToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToServer::InternalSwap(ToServer* other) {
  std::swap(datatype_, other->datatype_);
  std::swap(modeinfo_, other->modeinfo_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(forward_, other->forward_);
  std::swap(backward_, other->backward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToServer_descriptor_;
  metadata.reflection = ToServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToServer

// optional .test.ToServer.Type DataType = 1;
bool ToServer::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToServer::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
void ToServer::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToServer::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
 ::test::ToServer_Type ToServer::datatype() const {
  // @@protoc_insertion_point(field_get:test.ToServer.DataType)
  return static_cast< ::test::ToServer_Type >(datatype_);
}
 void ToServer::set_datatype(::test::ToServer_Type value) {
  assert(::test::ToServer_Type_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.DataType)
}

// optional .test.ToServer.Mode ModeInfo = 2;
bool ToServer::has_modeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToServer::set_has_modeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ToServer::clear_has_modeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToServer::clear_modeinfo() {
  modeinfo_ = 0;
  clear_has_modeinfo();
}
 ::test::ToServer_Mode ToServer::modeinfo() const {
  // @@protoc_insertion_point(field_get:test.ToServer.ModeInfo)
  return static_cast< ::test::ToServer_Mode >(modeinfo_);
}
 void ToServer::set_modeinfo(::test::ToServer_Mode value) {
  assert(::test::ToServer_Mode_IsValid(value));
  set_has_modeinfo();
  modeinfo_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.ModeInfo)
}

// optional bool left = 3;
bool ToServer::has_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToServer::set_has_left() {
  _has_bits_[0] |= 0x00000004u;
}
void ToServer::clear_has_left() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToServer::clear_left() {
  left_ = false;
  clear_has_left();
}
 bool ToServer::left() const {
  // @@protoc_insertion_point(field_get:test.ToServer.left)
  return left_;
}
 void ToServer::set_left(bool value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.left)
}

// optional bool right = 4;
bool ToServer::has_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToServer::set_has_right() {
  _has_bits_[0] |= 0x00000008u;
}
void ToServer::clear_has_right() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToServer::clear_right() {
  right_ = false;
  clear_has_right();
}
 bool ToServer::right() const {
  // @@protoc_insertion_point(field_get:test.ToServer.right)
  return right_;
}
 void ToServer::set_right(bool value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.right)
}

// optional bool forward = 5;
bool ToServer::has_forward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ToServer::set_has_forward() {
  _has_bits_[0] |= 0x00000010u;
}
void ToServer::clear_has_forward() {
  _has_bits_[0] &= ~0x00000010u;
}
void ToServer::clear_forward() {
  forward_ = false;
  clear_has_forward();
}
 bool ToServer::forward() const {
  // @@protoc_insertion_point(field_get:test.ToServer.forward)
  return forward_;
}
 void ToServer::set_forward(bool value) {
  set_has_forward();
  forward_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.forward)
}

// optional bool backward = 6;
bool ToServer::has_backward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ToServer::set_has_backward() {
  _has_bits_[0] |= 0x00000020u;
}
void ToServer::clear_has_backward() {
  _has_bits_[0] &= ~0x00000020u;
}
void ToServer::clear_backward() {
  backward_ = false;
  clear_has_backward();
}
 bool ToServer::backward() const {
  // @@protoc_insertion_point(field_get:test.ToServer.backward)
  return backward_;
}
 void ToServer::set_backward(bool value) {
  set_has_backward();
  backward_ = value;
  // @@protoc_insertion_point(field_set:test.ToServer.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
